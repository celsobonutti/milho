(defn atom? (value) (not (pair? value)))

(defn id (value) value)

(defn not (value)
      (if value
          False
          True))

(defmacro and
    (() True)
    ((value) (if value True False))
    ((value +rest) (if value (and +rest...)
                              False)))

(defmacro or
    (() False)
    ((value) (if value True False))
    ((value +rest) (if value True
                            (or +rest...))))


(defmacro guard
    (clauses body)
    (if (and clauses...)
        body
        (raise 'failed-guard-clause "A clause failed to match")))

(defn list (+rest)
      +rest)
