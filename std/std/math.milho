(import (prefix-with list: list))

(defn negative? (x) (< x 0))

(def = eq?)

(defn -
  ((x) (negate x))
  ((x +rest) (eval (list:append '(+ x) (list:map negate +rest)))))

(defn /
  ((x) (invert x))
  ((x +rest) (eval (list:append '(* x) (list:map invert +rest)))))

(defn denom (x) (numerator (invert x)))

(defn even? (x) (= 1 (denom (/ x 2))))

(defn add-one (x) (+ x 1))

(defn pow (base exponent)
      (if (negative? exponent)
          (if (= 0 base)
              (raise 'negative-exponent "Negative exponent when base is zero")
              (invert (pow base (negate exponent))))
          (eval (cons * (list:make-list exponent base)))))
