[- Built-in and basic function definitions  -]

[- TO-DO: Generate builtins from the BuiltIn.hs file -]
(.__def def .__def) ;; Define def using built-in since it's not declared yet.
(def defn .__defn)
(def defmacro .__defmacro)
(def + .__add)
(def * .__mul)
(def = .__eq)
(def > .__gt)
(def < .__lt)
(def negate .__negate)
(def invert .__invert)
(def fn .__fn)
(def let .__let)
(def if .__if)
(def cond .__cond)
(def read .__read)
(def eval .__eval)
(def println .__println)
(def print .__print)
(def loop .__loop)
(def do .__do)
(def cons .__cons)
(def car .__car)
(def cdr .__cdr)
(def quote .__quote)
(def set! .__set)
(def numerator .__numerator)
(def concat .__concat)
(def str .__str)
(def split .__split)
(def bool? .__bool?)
(def error? .__error?)
(def symbol? .__symbol?)
(def macro? .__macro?)
(def string? .__string?)
(def number? .__number?)
(def pair? .__pair?)
(def eq? .__eq)
(def raise .__raise)
(def call-with-error-handler .__call-with-error-handler)
(def error-code .__error-code)
(def import .__import)

(defn atom? (value) (not (pair? value)))

(defn id (value) value)

(defn not (value)
      (if value
          False
          True))

(defmacro and
    (() True)
    ((value) (if value True False))
    ((value +rest) (if value (and +rest...)
                              False)))

(defmacro or
    (() False)
    ((value) (if value True False))
    ((value +rest) (if value True
                            (or +rest...))))


(defmacro guard
    (clauses body)
    (if (and clauses...)
        body
        (raise 'failed-guard-clause "A clause failed to match")))
