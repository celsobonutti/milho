(import (prefix-with list: list))

(def = eq?)

(defn -
  ((x) (negate x))
  ((x +rest) (eval (list:append '(+ x) (list:map negate +rest)))))

(defn /
  ((x) (invert x))
  ((x +rest) (eval (list:append '(* x) (list:map invert +rest)))))

(defn denom (x) (numerator (invert x)))

(defn even? (x) (= 1 (denom (/ x 2))))

(defn add-one (x) (+ x 1))

(defn pow (x y)
      (eval (cons * (make-list y x))))
